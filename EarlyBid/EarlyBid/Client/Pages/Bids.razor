@page "/bids"
@using EarlyBid.Shared.Models
@using EarlyBid.Shared.ViewModels
@using Blazor.Extensions;
@inject HttpClient Http
@inject HubConnectionBuilder hubConnectionBuilder

<style>
    .number-fields,
    .price-fields {
        width: 50px;
    }

    .description-fields {
        width: 100%;
    }
</style>

@if (bids == null)
{
    <h2>Loading...</h2>
}
else
{
    <table class="ui celled editable table">
        <thead>
            <tr>
                <th>Bidder</th>
                <th>Sticker Number</th>
                <th>Description</th>
                <th>Start</th>
                <th>End</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bid in bids)
            {
                <tr>
                    <td class="collapsing">
                        <input class="square no border number-fields" @bind="bid.BidderNumber" @oninput="@(async () => await SetStateAsync(bid))" />
                    </td>
                    <td class="collapsing">
                        <input class="square no border number-fields" @bind="bid.StickerNumber" @oninput="@(async () => await SetStateAsync(bid))" />
                    </td>
                    <td>
                        <input class="square no border description-fields" @bind="bid.Description" @oninput="@(async () => await SetStateAsync(bid))" />
                    </td>
                    <td class="collapsing">
                        <span>$</span>
                        <input class="square no border price-fields" @bind="bid.StartingPrice" @oninput="@(async () => await SetStateAsync(bid))" />
                    </td>
                    <td class="collapsing">
                        <span>$</span>
                        <input class="square no border price-fields" @bind="bid.EndPrice" @oninput="@(async () => await SetStateAsync(bid))" />
                    </td>
                    <td class="collapsing">
                        @if (bid.IsChanged)
                        {
                            <button class="ui fluid tertiary button" @onclick="@(async () => await UpdateBidAsync(bid))">
                                <i class="green checkmark icon"></i>
                            </button>
                        }
                        <button class="ui fluid tertiary button" @onclick="@(async () => await DeleteBidAsync(bid.Id))">
                            <i class="red trash alternate icon"></i>
                        </button>
                    </td>
                </tr>
            }
            <tr>
                <td colspan="6">
                    <button class="ui fluid tertiary button" @onclick="@(async () => await CreateBid())">Add a bid</button>
                </td>
            </tr>
        </tbody>
    </table>
}

@code {
    BidEdit[] bids;
    HubConnection connection;
    protected override async Task OnInitializedAsync()
    {
        // in Component Initialization code
        connection = hubConnectionBuilder
        .WithUrl("/auctions", // The hub URL. If the Hub is hosted on the server where the blazor is hosted, you can just use the relative path.
        opt =>
        {
            opt.LogLevel = SignalRLogLevel.Trace; // Client log level
        }).Build(); // Build the HubConnection
        connection.On<string>("ReceivedBid", this.HandleResult);
        await connection.StartAsync(); // Start the connection.
        await connection.InvokeAsync("ReceivedBid");

        await LoadListAsync();
    }

    protected async Task CreateBid()
    {
        var bid = new Bid();
        bid.Id = Guid.NewGuid().ToString();

        await Http.PostJsonAsync("api/bids", bid);
        
        await connection.InvokeAsync("ReceivedBid");
    }

    protected async Task DeleteBidAsync(string id)
    {
        await Http.DeleteAsync("api/bids/" + id);
        
        await connection.InvokeAsync("ReceivedBid");
    }

    protected async Task UpdateBidAsync(BidEdit bid)
    {
        await Http.PutJsonAsync("api/bids/" + bid.Id, bid);
        
        await connection.InvokeAsync("ReceivedBid");
    }

    protected async Task SetStateAsync(BidEdit bid)
    {
        bid.IsChanged = true;
    }
    
    public async Task LoadListAsync()
    {
        bids = await Http.GetJsonAsync<BidEdit[]>("api/bids");
    }

    public async Task HandleResult(string args)
    {
        await LoadListAsync();
        StateHasChanged();
    }
}
